{"version":3,"sources":["App.tsx","reportWebVitals.ts","contexts/redataOverviewContext.ts","utils/helpers.ts","pages/Alerts.tsx","components/Header.tsx","components/Sidebar.tsx","pages/Dashboard.tsx","components/LineageGraph.tsx","components/ModelDetails.tsx","pages/GraphView.tsx","index.tsx"],"names":["App","Fragment","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","RedataOverviewContext","React","createContext","anomalies","metrics","schema_changes","aggregated_metrics","Map","aggregated_alerts","graph","generated_at","stripQuotes","str","replaceAll","extractComponentFromIdentifier","identifier","component","arr","split","idx","database","schema","tableName","columnName","metricName","length","generateAlertMessage","anomaly","compareText","last_value","last_avg","percentage","Math","abs","toFixed","metric","column_name","generateSchemaChangeMessage","change","message","operation","data_type","prev_column_name","prev_data_type","Alerts","dateTimeFormat","overview","useContext","schemaChanges","className","scope","map","table_name","format","time_window_end","to","id","detected_time","Header","type","htmlFor","data-dev-hint","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","href","Sidebar","title","alt","src","size","target","rel","require","prepareOverviewData","raw","data","JSON","parse","finalOverview","has","set","tableMetrics","columnMetrics","metricMap","get","key","push","values","sortedMetrics","sort","a","b","moment","diff","extractMetrics","alerts","model","obj","anomalyMap","schemaChangesMap","prepareAlerts","console","log","Dashboard","Provider","value","LineageGraph","props","useState","network","setNetwork","useSearchParams","selectNodes","options","networkOptions","events","getNetwork","n","memo","echarts","LineChart","ScatterChart","TitleComponent","TooltipComponent","GridComponent","SingleAxisComponent","VisualMapComponent","UniversalTransition","MarkAreaComponent","CanvasRenderer","generateMarkAreas","anomaliesMap","xAxis","subtract","interval_length_sec","generatePiecesForVisualMap","pieces","anomaliesTimeWindow","Set","i","gt","lte","generateMetricCharts","anomaliesByTimeWindowEnd","alert","alertsByTimeWindowEnd","hasOwnProperty","generateAnomaliesByTimeWindowEnd","timeRange","tableMetricCharts","Array","from","text","grid","top","right","bottom","left","m","yAxis","series","name","color","smooth","markArea","itemStyle","tooltip","trigger","visualMap","show","dimension","inRange","outOfRange","option","columnMetricCharts","alertScatterPlotOptions","position","formatter","params","volume","timeWindowEnd","messages","msg","join","generateAlertTooltip","textBaseline","singleAxis","boundaryGap","splitLine","height","axisLabel","interval","coordinateSystem","symbolSize","dataItem","ModelDetails","modelExists","fullTableName","GraphView","nodes","edges","dbtNodes","dbtSources","sources","Object","entries","details","resource","packageName","modelName","modelId","node","label","shape","parentNodes","depends_on","parent","parentNode","edge","arrows","generateGraph","setURLSearchParams","selectNode","modelIdentifier","deselectNode","_","ReactDOM","render","path","element","document","getElementById"],"mappings":"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","file":"static/js/main.4c031b7e.chunk.js","sourcesContent":["import React, {ReactElement} from 'react';\nimport './App.css';\nimport {Outlet} from 'react-router-dom';\n\nconst App: React.FC = (): ReactElement => {\n    return (\n        <React.Fragment>\n            <Outlet/>\n        </React.Fragment>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\n\nexport interface DbtNode {\n    \"raw_sql\": string;\n    \"resource_type\": string;\n    \"depends_on\": {\n        \"macros\": string[];\n        \"nodes\": string[];\n    };\n    \"config\": {\n        \"enabled\": boolean;\n        \"alias\": string | null;\n        \"schema\": string | null;\n        \"database\": string | null;\n        \"tags\": string[];\n        \"meta\": {};\n        \"materialized\": string;\n        \"persist_docs\": {};\n        \"quoting\": {};\n        \"column_types\": {};\n        \"full_refresh\": string | null;\n        \"on_schema_change\": string;\n        \"post-hook\": [];\n        \"pre-hook\": []\n    };\n    \"database\": string;\n    \"schema\": string;\n    \"fqn\": string[];\n    \"unique_id\": string;\n    \"package_name\": string;\n    \"root_path\": string;\n    \"path\": string;\n    \"original_file_path\": string;\n    \"name\": string;\n    \"alias\": string;\n    \"checksum\": {\n        \"name\": string;\n        \"checksum\": string;\n    };\n    \"tags\": [];\n    \"refs\": Array<Array<string>>;\n    \"sources\": [];\n    \"description\": string;\n    \"columns\": {};\n    \"meta\": {};\n    \"docs\": {\n        \"show\": boolean\n    };\n    \"patch_path\": string;\n    \"compiled_path\": string | null;\n    \"build_path\": string | null;\n    \"deferred\": boolean;\n    \"unrendered_config\": {};\n    \"created_at\": number\n}\n\nexport interface Anomaly {\n    column_name: string;\n    computed_on: string;\n    id: string;\n    interval_length_sec: number;\n    last_avg: number;\n    last_stddev: number;\n    last_value: number;\n    metric: string;\n    table_name: string;\n    time_window_end: string;\n    z_score_value: number;\n}\n\nexport interface Metric {\n    column_name: string;\n    computed_on: string;\n    id: string;\n    interval_length_sec: number;\n    metric: string;\n    table_name: string;\n    time_window_end: string;\n    time_window_start: string;\n    value: number;\n}\n\nexport interface DbtSource {\n    columns: {};\n    config: {};\n    created_at: number;\n    database: string;\n    description: string;\n    external: string | null;\n    fqn: Array<string>;\n    freshness: {};\n    identifier: string;\n    loaded_at_field: null;\n    loader: string;\n    meta: {};\n    name: string;\n    original_file_path: string;\n    package_name: string;\n    patch_path: string | null;\n    path: string;\n    quoting: { database: string | null, schema: string | null, identifier: string | null, column: string | null };\n    relation_name: string;\n    resource_type: string;\n    root_path: string;\n    schema: string;\n    source_description: string;\n    source_meta: {};\n    source_name: string;\n    tags: [];\n    unique_id: string;\n    unrendered_config: {};\n}\n\ninterface DbtGraph {\n    exposures: object;\n    nodes: { [key: string]: DbtNode };\n    sources: { [key: string]: DbtSource };\n}\n\nexport interface AggregatedMetrics {\n    tableMetrics: Map<string, Array<Metric>>;\n    columnMetrics: Map<string, Array<Metric>>;\n}\n\nexport interface AggregatedAlerts {\n    anomalies: Map<string, Array<Anomaly>>;\n    schemaChanges: Map<string, Array<SchemaChange>>;\n}\n\nexport interface SchemaChange {\n    column_name: string;\n    data_type: string;\n    detected_time: string;\n    id: string;\n    is_nullable: boolean;\n    operation: string;\n    prev_column_name: null;\n    prev_data_type: null;\n    prev_is_nullable: null;\n    table_name: string;\n}\n\nexport interface OverviewData {\n    anomalies: Array<Anomaly>;\n    metrics: Array<Metric>;\n    schema_changes: Array<SchemaChange>;\n    aggregated_metrics: Map<string, AggregatedMetrics>;\n    aggregated_alerts: Map<string, AggregatedAlerts>;\n    graph: DbtGraph | null;\n    generated_at: string;\n}\n\nexport const RedataOverviewContext = React.createContext<OverviewData>({\n    anomalies: [],\n    metrics: [],\n    schema_changes: [],\n    aggregated_metrics: new Map<string, AggregatedMetrics>(),\n    aggregated_alerts: new Map<string, AggregatedAlerts>(),\n    graph: null,\n    generated_at: '',\n});\n","import {AggregatedAlerts, Anomaly} from \"../contexts/redataOverviewContext\";\n\nexport const DATE_TIME_FORMAT = 'YYYY-MM-DDTHH:mm:ss';\n\nexport const stripQuotes = (str: string) => {\n    return str.replaceAll('\"', '').replaceAll('`', '');\n};\n\nexport const extractComponentFromIdentifier = (identifier: string | null, component: string): string => {\n    if (!identifier) return '';\n    const arr = identifier.split('.');\n    const mapping: { [key: string]: number } = {\n        database: 0,\n        schema: 1,\n        tableName: 2,\n        columnName: 3,\n        metricName: 4,\n    };\n    const idx = mapping[component];\n    if (!idx || idx >= arr.length) {\n        return ''\n    }\n    return arr[idx];\n};\n\nexport const generateAnomaliesByTimeWindowEnd = (alert: AggregatedAlerts) => {\n    const anomalyMap = alert.anomalies;\n    // const schemaChangesMap = alert.schemaChanges;\n    const alertsByTimeWindowEnd: { [key: string]: Array<Anomaly> } = {};\n    for (const anomalies of anomalyMap.values()) {\n        for (const anomaly of anomalies) {\n            if (!alertsByTimeWindowEnd.hasOwnProperty(anomaly.time_window_end)) {\n                alertsByTimeWindowEnd[anomaly.time_window_end] = [anomaly]\n            } else {\n                alertsByTimeWindowEnd[anomaly.time_window_end].push(anomaly)\n            }\n        }\n    }\n    return alertsByTimeWindowEnd;\n};\n\nexport const generateAlertMessage = (anomaly: Anomaly): string => {\n    const compareText = anomaly.last_value > anomaly.last_avg ? 'greater than' : 'less than';\n    const percentage = ((Math.abs(anomaly.last_value - anomaly.last_avg) / anomaly.last_avg) * 100).toFixed(2);\n    // const model = anomaly.column_name ? `column ${anomaly.column_name}` : 'this table';\n    return `${anomaly.metric}(${anomaly.column_name}) is ${percentage}% ${compareText} average`;\n};\n","import React, {ReactElement, useContext} from \"react\";\nimport {OverviewData, RedataOverviewContext, SchemaChange} from \"../contexts/redataOverviewContext\";\nimport {Link} from \"react-router-dom\";\nimport Moment from \"react-moment\";\nimport {generateAlertMessage, stripQuotes} from \"../utils/helpers\";\n\nconst generateSchemaChangeMessage = (change: SchemaChange): string => {\n    let message = ''\n    switch (change.operation) {\n        case 'column_added':\n            message = `column ${change.column_name} of type ${change.data_type} was added`;\n            break;\n        case 'column_removed':\n            message = `column ${change.prev_column_name} of type ${change.prev_data_type} was removed`;\n            break;\n        case 'type_change':\n            message = `${change.column_name} column data type was changed from ${change.prev_data_type} to \n            ${change.data_type}`;\n            break;\n        default:\n            message = ''\n    }\n    return message;\n};\n\nconst Alerts: React.FC = (): ReactElement => {\n    const dateTimeFormat = 'YYYY-MM-DD HH:mm:ss';\n    const overview: OverviewData = useContext(RedataOverviewContext);\n    const anomalies = overview.anomalies;\n    const schemaChanges = overview.schema_changes;\n    return (\n        <div className='grid grid-cols-1'>\n            <div className=\"flex flex-col\">\n                <div className=\"-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\">\n                    <div className=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\">\n                        <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n                            <table className=\"min-w-full divide-y divide-gray-200\">\n                                <thead className=\"bg-gray-50\">\n                                <tr>\n                                    <th scope=\"col\"\n                                        className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                                        Model\n                                    </th>\n                                    <th scope=\"col\"\n                                        className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                                        Message\n                                    </th>\n                                    <th scope=\"col\"\n                                        className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                                        Metric Value\n                                    </th>\n                                    <th scope=\"col\"\n                                        className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                                        Time Window\n                                    </th>\n                                    <th scope=\"col\" className=\"relative px-6 py-3\">\n                                        <span className=\"sr-only\">Details</span>\n                                    </th>\n                                </tr>\n                                </thead>\n                                <tbody className=\"bg-white divide-y divide-gray-200\">\n                                {anomalies.map(anomaly => (\n                                    <tr key={anomaly.id}>\n                                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                                    <span\n                                        className=\"badge mb-3 bg-red-600 rounded-full px-2 py-1 text-center object-right-top text-white text-sm mr-1\">!</span>\n                                            <span\n                                                className='text-xs text-gray-900'>{stripQuotes(anomaly.table_name)}</span>\n                                        </td>\n                                        <td className=\"px-6 text-sm py-4 whitespace-nowrap\">\n                                            <div\n                                                className=\"text-gray-900\">\n                                                {generateAlertMessage(anomaly)}\n                                            </div>\n                                        </td>\n                                        <td className=\"px-6 py-4 text-sm whitespace-nowrap\">\n                                            {anomaly.last_value.toFixed(2)}\n                                        </td>\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                                            <Moment format={dateTimeFormat}>{anomaly.time_window_end}</Moment>\n                                        </td>\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                                            <Link to={'/graph?model=' + stripQuotes(anomaly.table_name)}\n                                                  className=\"text-indigo-600 hover:text-indigo-900\">Details</Link>\n                                        </td>\n                                    </tr>\n                                ))}\n\n                                {schemaChanges.map(change => (\n                                    <tr key={change.id + '_' + change.prev_column_name}>\n                                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                                    <span\n                                        className=\"badge mb-3 bg-yellow-300 rounded-full px-2 py-1\n                                         text-center object-right-top text-white text-sm mr-1\">!</span>\n                                            <span\n                                                className='text-xs text-gray-900'>{stripQuotes(change.table_name)}</span>\n                                        </td>\n                                        <td className=\"px-6 text-sm py-4 whitespace-nowrap\">\n                                            <div\n                                                className=\"text-gray-900\">\n                                                {generateSchemaChangeMessage(change)}\n                                            </div>\n                                        </td>\n                                        <td className=\"px-6 py-4 text-sm whitespace-nowrap\">\n                                            {/*{change.last_value.toFixed(2)}*/}\n                                        </td>\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                                            <Moment format={dateTimeFormat}>{change.detected_time}</Moment>\n                                        </td>\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                                            <Link to={'/graph?model=' + stripQuotes(change.table_name)}\n                                                  className=\"text-indigo-600 hover:text-indigo-900\">Details</Link>\n                                        </td>\n                                    </tr>\n                                ))}\n\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default Alerts;\n","import React, {ReactElement} from \"react\";\n\nconst Header: React.FC = (): ReactElement => {\n    return (\n        <React.Fragment>\n            <input type=\"checkbox\" id=\"menu-open\" className=\"hidden\"/>\n\n            <label htmlFor=\"menu-open\"\n                   className=\"absolute right-2 bottom-2 shadow-lg rounded-full p-2 bg-gray-100 text-gray-600 md:hidden\"\n                   data-dev-hint=\"floating action button\">\n                <svg className=\"h-6 w-6\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\"\n                     stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M4 6h16M4 12h16M4 18h16\"/>\n                </svg>\n            </label>\n            <header className=\"bg-gray-600 text-gray-100 flex justify-between md:hidden\"\n                    data-dev-hint=\"mobile menu bar\">\n                <a href=\"/\" className=\"block p-4 text-white font-bold whitespace-nowrap truncate\">\n                    re_data\n                </a>\n\n\n                <label htmlFor=\"menu-open\" id=\"mobile-menu-button\"\n                       className=\"m-2 p-2 focus:outline-none hover:text-white hover:bg-gray-700 rounded-md\">\n                    <svg id=\"menu-open-icon\" className=\"h-6 w-6 transition duration-200 ease-in-out\"\n                         xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\"\n                              d=\"M4 6h16M4 12h16M4 18h16\"/>\n                    </svg>\n                    <svg id=\"menu-close-icon\" className=\"h-6 w-6 transition duration-200 ease-in-out\"\n                         xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\"/>\n                    </svg>\n                </label>\n            </header>\n        </React.Fragment>\n    )\n};\n\nexport default Header;\n","import React, {ReactElement} from \"react\";\nimport {Link} from 'react-router-dom';\nimport {BiNetworkChart, ImNotification, BsSlack, SiReadthedocs} from \"react-icons/all\";\n\nconst Sidebar: React.FC = (): ReactElement => {\n\n    return (\n        <aside id=\"sidebar\"\n               className=\"bg-gray-800 text-gray-100 md:w-32 w-3/4 min-w-min space-y-6 pt-6 px-0 absolute inset-y-0 left-0\n                transform md:relative md:translate-x-0 transition duration-200 ease-in-out  md:flex\n                 md:flex-col md:justify-between max-h-screen overflow-y-auto\" data-dev-hint=\"sidebar; px-0 for frameless; px-2 for visually inset the navigation\">\n            <div className=\"flex flex-col space-y-6\"\n                 data-dev-hint=\"optional div for having an extra footer navigation\">\n                <a href=\"/\" className=\"text-white flex items-center space-x-2 px-8\" title=\"Your App is cool\">\n                    <span className=\"text-2xl font-extrabold whitespace-nowrap truncate\">\n                        <img alt=\"re_data\" className=\"w-14\" src=\"redata.svg\" />\n                    </span>\n                </a>\n\n                <nav data-dev-hint=\"main navigation\">\n                    <Link to='alerts'\n                          className=\"flex items-center space-x-2 py-2 px-4 transition duration-200 hover:bg-gray-700 hover:text-white\">\n                        <ImNotification size=\"1.25em\" />\n                        <span>Alerts</span>\n                    </Link>\n\n                    <Link to='graph'\n                       className=\"flex items-center space-x-2 py-2 px-4 transition duration-200 hover:bg-gray-700 hover:text-white\">\n                        <BiNetworkChart size=\"1.25em\" />\n                        <span>Graph</span>\n                    </Link>\n                </nav>\n            </div>\n\n            <nav data-dev-hint=\"second-main-navigation or footer navigation\">\n                <a href=\"https://www.getre.io/slack\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"flex items-center space-x-2 py-2 px-4 transition duration-200 hover:bg-gray-700 hover:text-white\">\n                    <BsSlack size=\"1.25em\" />\n                    <div>Slack</div>\n                </a>\n                <a href=\"https://re-data.github.io/re-data/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"flex items-center space-x-2 py-2 px-4 transition duration-200 hover:bg-gray-700 hover:text-white\">\n                    <SiReadthedocs size=\"1.25em\" />\n                    <span>Docs</span>\n                </a>\n\n                <div className=\"flex items-center space-x-2 py-2 px-4 transition duration-200 hover:bg-gray-700 hover:text-white\">\n                    <span className=\"italic\" >version 0.4.0</span>\n                </div>\n            </nav>\n        </aside>\n    );\n};\n\nexport default Sidebar;\n","import React, {ReactElement} from \"react\";\nimport Header from \"../components/Header\";\nimport Sidebar from \"../components/Sidebar\";\nimport {Outlet} from 'react-router-dom';\nimport {\n    AggregatedAlerts,\n    AggregatedMetrics, Anomaly,\n    Metric,\n    OverviewData,\n    RedataOverviewContext, SchemaChange\n} from \"../contexts/redataOverviewContext\";\nimport moment from 'moment';\nimport {stripQuotes} from \"../utils/helpers\";\n\ninterface RawOverviewData {\n    anomalies: string | null;\n    metrics: string | null;\n    schema_changes: string | null;\n    graph: string;\n    generated_at: string;\n}\n\nconst extractMetrics = (overview: OverviewData): Map<string, AggregatedMetrics> => {\n    const metrics = overview.metrics;\n    const finalOverview: Map<string, AggregatedMetrics> = new Map();\n    for (const metric of metrics) {\n        const tableName = stripQuotes(metric.table_name);\n        const columnName = stripQuotes(metric.column_name);\n        const metricName = stripQuotes(metric.metric);\n        if (!finalOverview.has(tableName)) {\n            finalOverview.set(tableName, {\n                tableMetrics: new Map<string, Array<Metric>>(),\n                columnMetrics: new Map<string, Array<Metric>>(),\n            });\n        }\n        const metricMap = (finalOverview.get(tableName)!);\n        if (!columnName) { // table metric\n            // use _ as placeholder for column name that doesn't exist in table metrics, so we can have a uniform key structure\n            const key = `${tableName}._.${metricName}`;\n            if (metricMap.tableMetrics.has(key)) {\n                (metricMap.tableMetrics.get(key)!).push(metric);\n            } else {\n                metricMap.tableMetrics.set(key, [metric]);\n            }\n        } else {\n            const key = `${tableName}.${columnName}.${metricName}`;\n            if (metricMap.columnMetrics.has(key)) {\n                (metricMap.columnMetrics.get(key)!).push(metric);\n            } else {\n                metricMap.columnMetrics.set(key, [metric]);\n            }\n        }\n    }\n    // loop through each table/model and sort by ascending order by time_window_end for table and column metrics\n    for (const metricMap of finalOverview.values()) {\n        for (const [key, metrics] of metricMap.tableMetrics) {\n            const sortedMetrics = metrics.sort((a: Metric, b: Metric) => moment(a.time_window_end).diff(b.time_window_end));\n            metricMap.tableMetrics.set(key, sortedMetrics);\n        }\n        for (const [key, metrics] of metricMap.columnMetrics) {\n            const sortedMetrics = metrics.sort((a: Metric, b: Metric) => moment(a.time_window_end).diff(b.time_window_end));\n            metricMap.columnMetrics.set(key, sortedMetrics);\n        }\n    }\n    return finalOverview;\n};\n\nconst prepareAlerts = (overview: OverviewData): Map<string, AggregatedAlerts> => {\n    const anomalies = overview.anomalies;\n    const schemaChanges = overview.schema_changes;\n    const alerts = new Map<string, AggregatedAlerts>();\n    // group anomalies under `table_name`\n    for (const anomaly of anomalies) {\n        const model = stripQuotes(anomaly.table_name);\n        const columnName = anomaly.column_name ? anomaly.column_name : '_';\n        if (!alerts.has(model)) {\n            const obj: AggregatedAlerts = {\n                anomalies: new Map<string, Array<Anomaly>>(),\n                schemaChanges: new Map<string, Array<SchemaChange>>()\n            }\n            alerts.set(model, obj)\n        }\n        const anomalyMap = (alerts.get(model)!).anomalies;\n        if (!anomalyMap.has(columnName)) {\n            anomalyMap.set(columnName, [anomaly])\n        } else {\n            (anomalyMap.get(columnName)!).push(anomaly)\n        }\n    }\n    // group schema_changes under `table_name`\n    for (const change of schemaChanges) {\n        const model = stripQuotes(change.table_name);\n        const columnName = change.column_name;\n        if (!alerts.has(model)) {\n            const obj: AggregatedAlerts = {\n                anomalies: new Map<string, Array<Anomaly>>(),\n                schemaChanges: new Map<string, Array<SchemaChange>>()\n            }\n            alerts.set(model, obj)\n        }\n        const schemaChangesMap = (alerts.get(model)!).schemaChanges;\n        if (!schemaChangesMap.has(columnName)) {\n            schemaChangesMap.set(columnName, [change])\n        } else {\n            (schemaChangesMap.get(columnName)!).push(change)\n        }\n    }\n    return alerts;\n};\n\n// const overview: Array<RawOverviewData> = require('../overview.json');\nconst overview: Array<RawOverviewData> = require('../re_data_overview.json');\n\nconst prepareOverviewData = (raw: Array<RawOverviewData>) => {\n    const data = raw[0];\n    const overview: OverviewData = {\n        anomalies: data.anomalies ? JSON.parse(data.anomalies as string) : [],\n        metrics: data.metrics ? JSON.parse(data.metrics as string) : [],\n        schema_changes: data.schema_changes ? JSON.parse(data.schema_changes as string) : [],\n        aggregated_metrics: new Map<string, AggregatedMetrics>(),\n        aggregated_alerts: new Map<string, AggregatedAlerts>(),\n        graph: JSON.parse(data.graph as string),\n        generated_at: data.generated_at,\n    }\n    overview.aggregated_metrics = extractMetrics(overview);\n    overview.aggregated_alerts = prepareAlerts(overview);\n    console.log(overview)\n    return overview;\n};\n\nconst Dashboard: React.FC = (): ReactElement => {\n    return (\n        <RedataOverviewContext.Provider value={prepareOverviewData(overview)}>\n            <div className=\"relative min-h-screen md:flex\" data-dev-hint=\"container\">\n                <Header/>\n                <Sidebar/>\n\n                <main id=\"content\" className=\"flex-1 p-6 lg:px-8 bg-gray-100 max-h-screen overflow-y-auto\">\n                    <div className=\"max-w-full mx-auto h-full\">\n                        <div className=\"px-4 py-6 sm:px-0 h-full\">\n                            <Outlet/>\n                        </div>\n                    </div>\n                </main>\n            </div>\n        </RedataOverviewContext.Provider>\n    );\n};\n\nexport default Dashboard;\n","import React, {memo, PropsWithChildren, ReactElement, useState} from \"react\";\nimport VisNetworkReactComponent from \"vis-network-react\";\nimport {useSearchParams} from \"react-router-dom\";\n\ninterface LineageGraphProps {\n    data: any;\n    events: any;\n    networkOptions: any;\n}\n\nconst LineageGraph: React.FC<LineageGraphProps> = (props: PropsWithChildren<LineageGraphProps>): ReactElement => {\n    const [network, setNetwork] = useState<any>(null);\n    const [searchParams] = useSearchParams();\n    const model = searchParams.get('model');\n    if (model && network) {\n        network.selectNodes([model], true);\n    }\n    const getNetwork = (n: any) => {\n        setNetwork(n);\n        console.log(n);\n    };\n    return (\n        <div className=\"col-span-7\">\n            <VisNetworkReactComponent\n                data={props.data}\n                options={props.networkOptions}\n                events={props.events}\n                getNetwork={getNetwork}\n            />\n        </div>\n    );\n};\n\nexport default memo(LineageGraph, () => {\n    // Return true indicating that the props are always equal to avoid re-rendering of lineage graph since it's static\n    return true\n});\n","import React, {ReactElement, useContext} from \"react\";\nimport {useSearchParams} from \"react-router-dom\"\nimport {\n    AggregatedAlerts,\n    AggregatedMetrics, Anomaly, Metric,\n    OverviewData,\n    RedataOverviewContext, SchemaChange\n} from \"../contexts/redataOverviewContext\";\nimport {\n    DATE_TIME_FORMAT,\n    extractComponentFromIdentifier,\n    generateAlertMessage,\n    generateAnomaliesByTimeWindowEnd\n} from \"../utils/helpers\";\nimport * as echarts from 'echarts/core';\nimport {LineChart, LineSeriesOption, ScatterChart, ScatterSeriesOption} from 'echarts/charts';\nimport {\n    GridComponent,\n    GridComponentOption,\n    TooltipComponent,\n    TooltipComponentOption,\n    TitleComponent,\n    TitleComponentOption,\n    SingleAxisComponent,\n    SingleAxisComponentOption,\n    VisualMapComponent,\n    VisualMapComponentOption,\n    MarkAreaComponent,\n    MarkAreaComponentOption\n} from 'echarts/components';\nimport {CanvasRenderer} from 'echarts/renderers';\nimport EChartsReactCore from \"echarts-for-react/lib/core\";\nimport {UniversalTransition} from \"echarts/features\";\nimport moment from \"moment/moment\";\n\ntype ECOption = echarts.ComposeOption<| LineSeriesOption\n    | TitleComponentOption\n    | ScatterSeriesOption\n    | MarkAreaComponentOption\n    | VisualMapComponentOption\n    | SingleAxisComponentOption\n    | TooltipComponentOption\n    | GridComponentOption>;\n\necharts.use(\n    [\n        LineChart,\n        ScatterChart,\n        TitleComponent,\n        TooltipComponent,\n        GridComponent,\n        SingleAxisComponent,\n        VisualMapComponent,\n        UniversalTransition,\n        MarkAreaComponent,\n        CanvasRenderer\n    ]\n);\n\nconst generateMarkAreas = (alerts: AggregatedAlerts, columnName: string, metricName: string): any => {\n    const arr = []\n    const anomaliesMap = alerts.anomalies;\n    // '' empty string key contains anomalies for table level metrics.\n    const anomalies = anomaliesMap.has(columnName)\n        ? anomaliesMap.get(columnName)\n        : anomaliesMap.has('') ? anomaliesMap.get('') : [];\n    for (const anomaly of (anomalies!)) {\n        if (anomaly.metric === metricName) {\n            arr.push([{xAxis: moment(anomaly.time_window_end).subtract(anomaly.interval_length_sec, 's').format(DATE_TIME_FORMAT)}, {xAxis: anomaly.time_window_end}])\n        }\n    }\n    return arr\n}\n\nconst generatePiecesForVisualMap = (metrics: Array<Metric>, alerts: AggregatedAlerts, columnName: string) => {\n    const pieces: any = [];\n    const anomalies = alerts.anomalies;\n    const anomaliesTimeWindow = (anomalies.has(columnName) ? anomalies.get(columnName) : []) as Array<Anomaly>;\n    const set = new Set(anomaliesTimeWindow.map(a => `${a.metric}_${a.time_window_end}`))\n    for (let i = 0; i < metrics.length; i++) {\n        const metric = metrics[i];\n        const key = `${metric.metric}_${metric.time_window_end}`\n        if (set.has(key)) {\n            pieces.push({\n                gt: i - 1,\n                lte: i\n            })\n        }\n    }\n    return pieces;\n};\n\nconst generateAlertTooltip = (anomaliesByTimeWindowEnd: { [p: string]: Array<Anomaly> }, volume: number, timeWindowEnd: string) => {\n    const anomalies = anomaliesByTimeWindowEnd[timeWindowEnd];\n    const messages: string[] = [];\n    for (const anomaly of anomalies) {\n        const msg = generateAlertMessage(anomaly);\n        messages.push(msg);\n    }\n    return messages.join('<br>')\n};\n\nconst generateMetricCharts = (data: AggregatedMetrics, alerts: AggregatedAlerts): React.ReactElement => {\n    const anomaliesByTimeWindowEnd = generateAnomaliesByTimeWindowEnd(alerts);\n    let timeRange: string[] = [];\n    const tableMetricCharts = (\n        Array.from(data.tableMetrics).map(([key, metrics]) => {\n            const metricName = extractComponentFromIdentifier(key, 'metricName');\n            const columnName = extractComponentFromIdentifier(key, 'columnName');\n            const pieces = generatePiecesForVisualMap(metrics, alerts, columnName);\n            const options: ECOption = {\n                title: {\n                    text: `${extractComponentFromIdentifier(key, 'metricName')}`,\n                },\n                grid: {top: '20%', right: '5%', bottom: '12%', left: '12%'},\n                xAxis: {\n                    type: 'category',\n                    data: metrics.map(m => m.time_window_end),\n                },\n                yAxis: {\n                    type: 'value',\n                },\n                series: [\n                    {\n                        name: extractComponentFromIdentifier(key, 'metricName'),\n                        data: metrics.map(m => m.value),\n                        type: 'line',\n                        color: '#8884d8',\n                        smooth: true,\n                        markArea: {\n                            itemStyle: {\n                                color: 'rgba(255, 173, 177, 0.4)'\n                            },\n                            data: generateMarkAreas(alerts, columnName, metricName)\n                        }\n                    },\n                ],\n                tooltip: {\n                    trigger: 'axis',\n                },\n                visualMap: {\n                    show: false,\n                    dimension: 0,\n                    pieces: pieces,\n                    inRange: {\n                        color: pieces.length ? '#ee2828' : '#8884d8', // if no anomaly exists, everything is in range hence don't color red\n                    },\n                    outOfRange: {\n                        color: '#8884d8',\n                    }\n                }\n            };\n            return (\n                <div key={key}>\n                    <EChartsReactCore echarts={echarts} option={options}/>\n                </div>\n            )\n        }));\n    const columnMetricCharts = (\n        Array.from(data.columnMetrics).map(([key, metrics]) => {\n            const metricName = extractComponentFromIdentifier(key, 'metricName');\n            const columnName = extractComponentFromIdentifier(key, 'columnName');\n            if (!timeRange.length) {\n                timeRange = metrics.map(m => m.time_window_end)\n            }\n            const pieces = generatePiecesForVisualMap(metrics, alerts, columnName);\n            const options: ECOption = {\n                title: {\n                    text: `${extractComponentFromIdentifier(key, 'metricName')}(${extractComponentFromIdentifier(key, 'columnName')})`\n                },\n                grid: {top: '20%', right: '5%', bottom: '12%', left: '12%'},\n                xAxis: {\n                    type: 'category',\n                    data: metrics.map(m => m.time_window_end),\n                },\n                yAxis: {\n                    type: 'value',\n                },\n                series: [\n                    {\n                        name: metricName,\n                        data: metrics.map(m => m.value),\n                        type: 'line',\n                        color: '#8884d8',\n                        smooth: true,\n                        markArea: {\n                            itemStyle: {\n                                color: 'rgba(255, 173, 177, 0.4)'\n                            },\n                            data: generateMarkAreas(alerts, columnName, metricName)\n                        },\n                    }\n                ],\n                tooltip: {\n                    trigger: 'axis',\n                },\n                visualMap: {\n                    show: false,\n                    dimension: 0,\n                    pieces: pieces,\n                    inRange: {\n                        color: pieces.length ? '#ee2828' : '#8884d8', // if no anomaly exists, everything is in range hence don't color red\n                    },\n                    outOfRange: {\n                        color: '#8884d8',\n                    }\n                }\n            };\n            return (\n                <div key={key}>\n                    <EChartsReactCore echarts={echarts} option={options}/>\n                </div>\n            )\n        }));\n\n    const arr = [];\n    for (const key in anomaliesByTimeWindowEnd) {\n        arr.push([key, anomaliesByTimeWindowEnd[key].length ? 1 : 0]);\n    }\n\n    const alertScatterPlotOptions = {\n        tooltip: {\n            position: ['40', '15'],\n            formatter: (params: any) => {\n                return `${generateAlertTooltip(anomaliesByTimeWindowEnd, params.data[1], params.data[0])}`\n            }\n        },\n        title: {\n            textBaseline: \"middle\",\n            top: \"5%\",\n            text: \"Alerts\"\n        },\n        singleAxis: {\n            left: '15%',\n            right: '10%',\n            type: \"category\",\n            boundaryGap: false,\n            data: timeRange,\n            top: \"20%\",\n            splitLine: {\n                show: true\n            },\n            height: \"50\",\n            axisLabel: {\n                interval: 28\n            }\n        },\n        series: {\n            coordinateSystem: 'singleAxis',\n            type: 'scatter',\n            color: '#ee2828',\n            data: arr,\n            symbolSize: (dataItem: any) => {\n                return dataItem[1] * 15;\n            }\n        }\n    }\n    return (\n        <div>\n            <div className=\"h-44\">\n                <EChartsReactCore echarts={echarts} option={alertScatterPlotOptions}/>\n            </div>\n            <span className=\"text-lg text--capitalize\">Table Metrics</span>\n            {tableMetricCharts}\n            <span className=\"text-lg text--capitalize\">Column Metrics</span>\n            {columnMetricCharts}\n        </div>\n    );\n}\n\nconst ModelDetails: React.FC = (): ReactElement => {\n    const [searchParams] = useSearchParams();\n    let modelExists = false;\n    const fullTableName = searchParams.get('model');\n    const overview: OverviewData = useContext(RedataOverviewContext);\n\n    let data: AggregatedMetrics = {\n        tableMetrics: new Map<string, Array<Metric>>(),\n        columnMetrics: new Map<string, Array<Metric>>()\n    };\n    let alerts: AggregatedAlerts = {\n        anomalies: new Map<string, Array<Anomaly>>(),\n        schemaChanges: new Map<string, Array<SchemaChange>>()\n    };\n    if (typeof fullTableName === \"string\" && overview.aggregated_metrics.has(fullTableName)) {\n        modelExists = true;\n        data = overview.aggregated_metrics.get(fullTableName) as AggregatedMetrics;\n        if (overview.aggregated_alerts.has(fullTableName)) {\n            alerts = overview.aggregated_alerts.get(fullTableName) as AggregatedAlerts;\n        }\n    }\n    return (\n        <div className='col-span-3 h-auto overflow-scroll'>\n            <div className=\"bg-white rounded shadow border p-3\">\n                <div className=\"mb-3\">\n                    <span\n                        className=\"text-2xl text--capitalize font-bold\">Model: {extractComponentFromIdentifier(fullTableName, 'tableName')}</span>\n                </div>\n                {!modelExists ? (\n                    <span>No metrics</span>) : generateMetricCharts(data, alerts)}\n            </div>\n        </div>\n\n    );\n};\n\nexport default ModelDetails;\n","import React, {ReactElement, useContext} from \"react\";\nimport './GraphView.css';\nimport LineageGraph from \"../components/LineageGraph\";\nimport ModelDetails from \"../components/ModelDetails\";\nimport {useSearchParams} from \"react-router-dom\";\nimport {DbtNode, DbtSource, OverviewData, RedataOverviewContext} from \"../contexts/redataOverviewContext\";\n\ninterface VisPointer {\n    x: number,\n    y: number\n}\n\ninterface VisNode {\n    id: string | number,\n    label: string | number;\n    shape: string;\n}\n\ninterface VisEdge {\n    from: string | number,\n    to: string | number;\n    arrows: string;\n}\n\ninterface VisNetworkEventParams {\n    edges?: Array<string>,\n    nodes?: Array<string>,\n    event?: object,\n    pointer?: {\n        DOM: VisPointer\n        canvas: VisPointer\n    }\n}\n\ninterface IGraph {\n    nodes: Array<VisNode>;\n    edges: Array<VisEdge>;\n}\n\nconst generateGraph = (overview: OverviewData) => {\n    const graph: IGraph = {\n        nodes: [],\n        edges: [],\n    }\n    if (!overview.graph) {\n        return graph;\n    }\n    const dbtNodes = overview.graph.nodes;\n    const dbtSources = overview.graph.sources;\n    for (const [model, details] of Object.entries(dbtNodes)) {\n        const [resource, packageName, modelName] = model.split('.');\n        if (resource === 'test' || packageName === 're_data') {\n            continue;\n        }\n        const modelId = `${details.database}.${details.schema}.${details.name}`;\n        const node: VisNode = {\n            id: modelId,\n            label: modelName,\n            shape: 'box',\n        }\n        graph.nodes.push(node)\n\n        const parentNodes = new Set(details.depends_on.nodes);\n        for (const parent of parentNodes) {\n            const parentNode: DbtNode | DbtSource = dbtNodes[parent] ? dbtNodes[parent] : dbtSources[parent];\n            if (parentNode) {\n                // in coming edge only if parent node exists\n                const parentModelId = `${parentNode.database}.${parentNode.schema}.${parentNode.name}`;\n                const edge: VisEdge = {\n                    from: parentModelId,\n                    to: modelId,\n                    arrows: 'to'\n                }\n                graph.edges.push(edge);\n            }\n        }\n    }\n    return graph;\n};\n\nconst GraphView: React.FC = (): ReactElement => {\n    const overview: OverviewData = useContext(RedataOverviewContext);\n    const graph = generateGraph(overview)\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [searchParams, setURLSearchParams] = useSearchParams();\n    const data = {\n        nodes: graph.nodes,\n        edges: graph.edges\n    }\n    const events = {\n        selectNode: (params: VisNetworkEventParams) => {\n            if (!params.nodes || params.nodes.length !== 1) {\n                // only select a single node\n                return\n            }\n            const modelIdentifier = params.nodes[0];\n            setURLSearchParams({\n                model: modelIdentifier,\n            });\n        },\n        deselectNode: (_: VisNetworkEventParams) => {\n            setURLSearchParams({});\n        }\n    };\n    const networkOptions = {\n        \"height\": '100%',\n        \"width\": '100%',\n        \"edges\": {\n            \"color\": {\n                \"color\": \"#8884d8\",\n                \"highlight\": \"#8884d8\",\n                \"hover\": \"#8884d8\",\n                \"inherit\": false\n            }, \"dashes\": false, \"smooth\": {\"type\": \"continuous\", \"forceDirection\": \"none\"}\n        },\n        \"nodes\": {\n            \"color\": {\n                \"border\": \"#8884d8\",\n                \"background\": \"#8884d8\",\n                \"highlight\": \"#392396\",\n                \"hover\": {\n                    \"border\": \"#392396\",\n                    \"background\": \"#8884d8\",\n                }\n            },\n            // \"color\": \"#8884d8\",\n            \"font\": {\n                \"color\": \"#ffffff\"\n            }\n        },\n        \"layout\": {\n            \"hierarchical\": {\n                \"enabled\": true,\n                \"levelSeparation\": 485,\n                \"nodeSpacing\": 50,\n                \"treeSpacing\": 35,\n                \"blockShifting\": false,\n                \"edgeMinimization\": true,\n                \"parentCentralization\": false,\n                \"direction\": \"LR\",\n                \"sortMethod\": \"directed\"\n            }\n        },\n        \"interaction\": {\"hover\": true, \"navigationButtons\": false, \"multiselect\": true, \"keyboard\": {\"enabled\": true}},\n        \"physics\": {\n            \"enabled\": false,\n            \"hierarchicalRepulsion\": {\"centralGravity\": 0},\n            \"minVelocity\": 0.75,\n            \"solver\": \"hierarchicalRepulsion\"\n        }\n    };\n\n    return (\n        <div\n            // className=\"grid grid-cols-1 sm:grid-cols-1 md:grid-cols-6 gap-4 CustomGraphHeight shadow overflow-hidden border-b border-gray-200 sm:rounded-lg h-full\">\n            className=\"grid grid-cols-1 sm:grid-cols-1 md:grid-cols-10\n             gap-4 h-80 border-4 border-dashed border-gray-200\n              rounded-lg h-full\">\n            <LineageGraph data={data} events={events} networkOptions={networkOptions}/>\n            <ModelDetails/>\n        </div>\n    )\n};\n\nexport default GraphView;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Routes, Route, HashRouter} from \"react-router-dom\";\nimport reportWebVitals from './reportWebVitals';\nimport Alerts from \"./pages/Alerts\";\nimport Dashboard from \"./pages/Dashboard\";\nimport GraphView from \"./pages/GraphView\";\n\nReactDOM.render(\n    <HashRouter>\n        <Routes>\n            <Route path=\"/\" element={<App/>}>\n                <Route path=\"/\" element={<Dashboard/>}>\n                    <Route path=\"alerts\" element={<Alerts/>}/>\n                    <Route path=\"graph\" element={<GraphView/>}/>\n                </Route>\n            </Route>\n        </Routes>\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}