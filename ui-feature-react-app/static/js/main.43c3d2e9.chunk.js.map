{"version":3,"sources":["components/ModelDetails.tsx","App.tsx","reportWebVitals.ts","contexts/redataOverviewContext.ts","utils/helpers.ts","pages/Alerts.tsx","components/Header.tsx","components/Sidebar.tsx","pages/Dashboard.tsx","components/LineageGraph.tsx","components/SchemaChanges.tsx","components/MetricCharts.tsx","pages/GraphView.tsx","index.tsx"],"names":["ModelTabs","App","Fragment","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","RedataOverviewContext","React","createContext","anomalies","metrics","schema_changes","aggregated_metrics","Map","aggregated_alerts","graph","generated_at","DATE_FORMAT","stripQuotes","str","replaceAll","extractComponentFromIdentifier","identifier","component","arr","split","idx","database","schema","tableName","columnName","metricName","length","generateAlertMessage","anomaly","compareText","last_value","last_avg","percentage","Math","abs","toFixed","show_name","column_name","metric","generateAnomalyValue","hours","indexOf","metricValue","value","getFormatter","generateSchemaChangeMessage","change","message","operation","data_type","prev_column_name","prev_data_type","Alerts","dateTimeFormat","overview","useContext","schemaChanges","className","scope","map","table_name","dayjs","time_window_end","format","to","id","detected_time","Header","type","htmlFor","data-dev-hint","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","href","Sidebar","title","alt","src","size","target","rel","extractMetrics","finalOverview","has","set","tableMetrics","columnMetrics","metricMap","get","key","push","values","sortedMetrics","sort","a","b","diff","prepareAlerts","alerts","model","Number","obj","anomalyMap","schemaChangesMap","Dashboard","initialOverview","useState","reDataOverview","setReDataOverview","prepareOverviewData","fetch","headers","response","json","rawJson","data","JSON","parse","console","log","useEffect","Provider","LineageGraph","props","network","setNetwork","useSearchParams","selectNodes","overviewDataLoaded","options","networkOptions","events","getNetwork","n","memo","prevState","SchemaChanges","changes","generateMarkAreas","anomaliesMap","xAxis","subtract","interval_length_sec","generatePiecesForVisualMap","pieces","anomaliesTimeWindow","Set","i","gt","lte","MetricCharts","alertChartOptions","timeRange","tableMetricCharts","Array","from","text","grid","top","right","bottom","left","m","yAxis","axisLabel","formatter","series","name","color","smooth","markArea","itemStyle","tooltip","trigger","visualMap","show","dimension","inRange","outOfRange","tableAnomalies","echarts","option","columnMetricCharts","columnAnomalies","seen","add","alertMetricCharts","showAnomalies","LineChart","ScatterChart","TitleComponent","TooltipComponent","GridComponent","SingleAxisComponent","VisualMapComponent","UniversalTransition","MarkAreaComponent","CanvasRenderer","ModelDetails","searchParams","ANOMALIES","activeTab","setActiveTab","modelExists","fullTableName","METRICS","onClick","SCHEMA_CHANGES","renderTab","GraphView","nodes","edges","dbtNodes","dbtSources","sources","Object","entries","details","resource","packageName","modelName","modelId","node","label","shape","parentNodes","depends_on","parent","parentNode","edge","arrows","generateGraph","setURLSearchParams","selectNode","params","modelIdentifier","deselectNode","_","ReactDOM","render","path","element","document","getElementById"],"mappings":"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","file":"static/js/main.43c3d2e9.chunk.js","sourcesContent":["import React, {ReactElement, useContext, useState} from \"react\";\nimport {useSearchParams} from \"react-router-dom\"\nimport {\n    AggregatedAlerts,\n    AggregatedMetrics, Anomaly, Metric,\n    OverviewData,\n    RedataOverviewContext, SchemaChange\n} from \"../contexts/redataOverviewContext\";\nimport {\n    extractComponentFromIdentifier,\n} from \"../utils/helpers\";\nimport * as echarts from 'echarts/core';\nimport {LineChart, ScatterChart} from 'echarts/charts';\nimport {\n    GridComponent,\n    TooltipComponent,\n    TitleComponent,\n    SingleAxisComponent,\n    VisualMapComponent,\n    MarkAreaComponent,\n} from 'echarts/components';\nimport {CanvasRenderer} from 'echarts/renderers';\nimport {UniversalTransition} from \"echarts/features\";\nimport './ModelDetails.css';\nimport SchemaChanges from \"./SchemaChanges\";\nimport MetricCharts from \"./MetricCharts\";\n\necharts.use(\n    [\n        LineChart,\n        ScatterChart,\n        TitleComponent,\n        TooltipComponent,\n        GridComponent,\n        SingleAxisComponent,\n        VisualMapComponent,\n        UniversalTransition,\n        MarkAreaComponent,\n        CanvasRenderer\n    ]\n);\n\nenum ModelTabs {\n    ANOMALIES = 'anomalies',\n    SCHEMA_CHANGES = 'schema_changes',\n    METRICS = 'metrics'\n}\n\nconst ModelDetails: React.FC = (): ReactElement => {\n    const [searchParams] = useSearchParams();\n    const [activeTab, setActiveTab] = useState(ModelTabs.ANOMALIES);\n\n    const renderTab = (activeTab: ModelTabs, data: AggregatedMetrics, alerts: AggregatedAlerts): ReactElement => {\n        if (activeTab === ModelTabs.METRICS) {\n            return <MetricCharts data={data} alerts={alerts} showAnomalies={false}/>\n        } else if (activeTab === ModelTabs.ANOMALIES) {\n            return <MetricCharts data={data} alerts={alerts} showAnomalies={true}/>\n        } else {\n            return <SchemaChanges alerts={alerts}/>\n        }\n    }\n\n    let modelExists = false;\n    const fullTableName = searchParams.get('model');\n    const overview: OverviewData = useContext(RedataOverviewContext);\n\n    const showAnomalies = (): void => setActiveTab(ModelTabs.ANOMALIES);\n    const showSchemaChanges = (): void => setActiveTab(ModelTabs.SCHEMA_CHANGES);\n    const showMetrics = (): void => setActiveTab(ModelTabs.METRICS);\n\n    let data: AggregatedMetrics = {\n        tableMetrics: new Map<string, Array<Metric>>(),\n        columnMetrics: new Map<string, Array<Metric>>()\n    };\n    let alerts: AggregatedAlerts = {\n        anomalies: new Map<string, Array<Anomaly>>(),\n        schemaChanges: new Map<string, Array<SchemaChange>>()\n    };\n    if (typeof fullTableName === \"string\" && overview.aggregated_metrics.has(fullTableName)) {\n        modelExists = true;\n        data = overview.aggregated_metrics.get(fullTableName) as AggregatedMetrics;\n        if (overview.aggregated_alerts.has(fullTableName)) {\n            alerts = overview.aggregated_alerts.get(fullTableName) as AggregatedAlerts;\n        }\n    }\n\n    return (\n        <div className='col-span-4 h-auto overflow-scroll'>\n            <div className=\"bg-white rounded shadow border p-3\">\n\n                <div>\n                    <ul className=\"nav\">\n                        <li className={activeTab === ModelTabs.METRICS ? \"active\" : \"\"}\n                            onClick={showMetrics}>Metrics\n                        </li>\n                        <li className={activeTab === ModelTabs.ANOMALIES ? \"active\" : \"\"}\n                            onClick={showAnomalies}>Anomalies\n                        </li>\n                        <li className={activeTab === ModelTabs.SCHEMA_CHANGES ? \"active\" : \"\"}\n                            onClick={showSchemaChanges}>Schema\n                        </li>\n                    </ul>\n                    <div className=\"mb-2\">\n                    <span\n                        className=\"text-2xl text--capitalize font-bold\">{extractComponentFromIdentifier(fullTableName, 'tableName')}</span>\n                    </div>\n                    <div className=\"outlet\">\n                        {modelExists ? renderTab(activeTab, data, alerts) : <span>Click on node to show metrics, anomalies or schema changes</span>}\n                    </div>\n                </div>\n            </div>\n        </div>\n\n    );\n};\n\nexport default ModelDetails;\n","import React, {ReactElement} from 'react';\nimport './App.css';\nimport {Outlet} from 'react-router-dom';\n\nconst App: React.FC = (): ReactElement => {\n    return (\n        <React.Fragment>\n            <Outlet/>\n        </React.Fragment>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\n\nexport interface DbtNode {\n    \"raw_sql\": string;\n    \"resource_type\": string;\n    \"depends_on\": {\n        \"macros\": string[];\n        \"nodes\": string[];\n    };\n    \"config\": {\n        \"enabled\": boolean;\n        \"alias\": string | null;\n        \"schema\": string | null;\n        \"database\": string | null;\n        \"tags\": string[];\n        \"meta\": {};\n        \"materialized\": string;\n        \"persist_docs\": {};\n        \"quoting\": {};\n        \"column_types\": {};\n        \"full_refresh\": string | null;\n        \"on_schema_change\": string;\n        \"post-hook\": [];\n        \"pre-hook\": []\n    };\n    \"database\": string;\n    \"schema\": string;\n    \"fqn\": string[];\n    \"unique_id\": string;\n    \"package_name\": string;\n    \"root_path\": string;\n    \"path\": string;\n    \"original_file_path\": string;\n    \"name\": string;\n    \"alias\": string;\n    \"checksum\": {\n        \"name\": string;\n        \"checksum\": string;\n    };\n    \"tags\": [];\n    \"refs\": Array<Array<string>>;\n    \"sources\": [];\n    \"description\": string;\n    \"columns\": {};\n    \"meta\": {};\n    \"docs\": {\n        \"show\": boolean\n    };\n    \"patch_path\": string;\n    \"compiled_path\": string | null;\n    \"build_path\": string | null;\n    \"deferred\": boolean;\n    \"unrendered_config\": {};\n    \"created_at\": number\n}\n\nexport interface Anomaly {\n    column_name: string;\n    computed_on: string;\n    id: string;\n    interval_length_sec: number;\n    last_avg: number;\n    last_stddev: number;\n    last_value: number;\n    metric: string;\n    table_name: string;\n    time_window_end: string;\n    z_score_value: number;\n}\n\nexport interface Metric {\n    column_name: string;\n    computed_on: string;\n    id: string;\n    interval_length_sec: number;\n    metric: string;\n    table_name: string;\n    time_window_end: string;\n    time_window_start: string;\n    value: number;\n}\n\nexport interface DbtSource {\n    columns: {};\n    config: {};\n    created_at: number;\n    database: string;\n    description: string;\n    external: string | null;\n    fqn: Array<string>;\n    freshness: {};\n    identifier: string;\n    loaded_at_field: null;\n    loader: string;\n    meta: {};\n    name: string;\n    original_file_path: string;\n    package_name: string;\n    patch_path: string | null;\n    path: string;\n    quoting: { database: string | null, schema: string | null, identifier: string | null, column: string | null };\n    relation_name: string;\n    resource_type: string;\n    root_path: string;\n    schema: string;\n    source_description: string;\n    source_meta: {};\n    source_name: string;\n    tags: [];\n    unique_id: string;\n    unrendered_config: {};\n}\n\ninterface DbtGraph {\n    exposures: object;\n    nodes: { [key: string]: DbtNode };\n    sources: { [key: string]: DbtSource };\n}\n\nexport interface AggregatedMetrics {\n    tableMetrics: Map<string, Array<Metric>>;\n    columnMetrics: Map<string, Array<Metric>>;\n}\n\nexport interface AggregatedAlerts {\n    anomalies: Map<string, Array<Anomaly>>;\n    schemaChanges: Map<string, Array<SchemaChange>>;\n}\n\nexport interface SchemaChange {\n    column_name: string;\n    data_type: string;\n    detected_time: string;\n    id: string;\n    is_nullable: boolean;\n    operation: string;\n    prev_column_name: null;\n    prev_data_type: null;\n    prev_is_nullable: null;\n    table_name: string;\n}\n\nexport interface OverviewData {\n    anomalies: Array<Anomaly>;\n    metrics: Array<Metric>;\n    schema_changes: Array<SchemaChange>;\n    aggregated_metrics: Map<string, AggregatedMetrics>;\n    aggregated_alerts: Map<string, AggregatedAlerts>;\n    graph: DbtGraph | null;\n    generated_at: string;\n}\n\nexport const RedataOverviewContext = React.createContext<OverviewData>({\n    anomalies: [],\n    metrics: [],\n    schema_changes: [],\n    aggregated_metrics: new Map<string, AggregatedMetrics>(),\n    aggregated_alerts: new Map<string, AggregatedAlerts>(),\n    graph: null,\n    generated_at: '',\n});\n","import {AggregatedAlerts, Anomaly, Metric, SchemaChange} from \"../contexts/redataOverviewContext\";\n\nexport const RE_DATA_OVERVIEW_FILE = 're_data_overview.json';\nexport const DATE_TIME_FORMAT = 'YYYY-MM-DDTHH:mm:ss';\nexport const DATE_FORMAT = 'YYYY-MM-DD';\n\nexport const stripQuotes = (str: string) => {\n    return str.replaceAll('\"', '').replaceAll('`', '');\n};\n\nexport const extractComponentFromIdentifier = (identifier: string | null, component: string): string => {\n    if (!identifier) return '';\n    const arr = identifier.split('.');\n    const mapping: { [key: string]: number } = {\n        database: 0,\n        schema: 1,\n        tableName: 2,\n        columnName: 3,\n        metricName: 4,\n    };\n    const idx = mapping[component];\n    if (!idx || idx >= arr.length) {\n        return ''\n    }\n    return arr[idx];\n};\n\nexport const generateAnomaliesByTimeWindowEnd = (alert: AggregatedAlerts) => {\n    const anomalyMap = alert.anomalies;\n    // const schemaChangesMap = alert.schemaChanges;\n    const alertsByTimeWindowEnd: { [key: string]: Array<Anomaly> } = {};\n    for (const anomalies of anomalyMap.values()) {\n        for (const anomaly of anomalies) {\n            if (!alertsByTimeWindowEnd.hasOwnProperty(anomaly.time_window_end)) {\n                alertsByTimeWindowEnd[anomaly.time_window_end] = [anomaly]\n            } else {\n                alertsByTimeWindowEnd[anomaly.time_window_end].push(anomaly)\n            }\n        }\n    }\n    return alertsByTimeWindowEnd;\n};\n\nexport const generateAlertMessage = (anomaly: Anomaly): string => {\n    const compareText = anomaly.last_value > anomaly.last_avg ? 'greater than' : 'less than';\n    const percentage = ((Math.abs(anomaly.last_value - anomaly.last_avg) / anomaly.last_avg) * 100).toFixed(2);\n    const show_name =  anomaly.column_name ? `${anomaly.metric}(${anomaly.column_name})` : `${anomaly.metric}`;\n    return `${show_name} is ${percentage}% ${compareText} average`;\n};\n\nexport const generateAnomalyValue = (anomaly: Anomaly): string => {\n    if (anomaly.metric === 'freshness') {\n        const hours = anomaly.last_value / 60 / 60\n        return `${hours.toFixed(2)} hours`;\n    }\n    else if (anomaly.metric.indexOf('percent') > -1) {\n        return `${anomaly.last_value.toFixed(2)}%`;\n    }\n    else if (anomaly.metric.indexOf('count') > -1) {\n        return `${anomaly.last_value}`;\n    }\n    else {\n        return `${anomaly.last_value.toFixed(2)}`;\n    }\n};\n\nexport const metricValue = (metric: Metric): number => {\n    if (metric.metric === 'freshness') {\n        return metric.value / 60 / 60;\n    }\n    else {\n        return metric.value\n    }\n}\n\nexport const getFormatter = (metricName: string): string => {\n    if (metricName === 'freshness') {\n        return '{value} hours'\n    }\n    else if (metricName.indexOf('percent') > -1) {\n        return `{value}%`;\n    }\n    return '{value}'\n}\n\nexport const generateSchemaChangeMessage = (change: SchemaChange): string => {\n    let message = ''\n    switch (change.operation) {\n        case 'column_added':\n            message = `column ${change.column_name} of type ${change.data_type} was added`;\n            break;\n        case 'column_removed':\n            message = `column ${change.prev_column_name} of type ${change.prev_data_type} was removed`;\n            break;\n        case 'type_change':\n            message = `${change.column_name} column data type was changed from ${change.prev_data_type} to \n            ${change.data_type}`;\n            break;\n        default:\n            message = ''\n    }\n    return message;\n};\n","import React, {ReactElement, useContext} from \"react\";\nimport {OverviewData, RedataOverviewContext} from \"../contexts/redataOverviewContext\";\nimport {Link} from \"react-router-dom\";\nimport dayjs from 'dayjs';\nimport {generateAlertMessage, generateAnomalyValue, generateSchemaChangeMessage, stripQuotes} from \"../utils/helpers\";\n\nconst Alerts: React.FC = (): ReactElement => {\n    const dateTimeFormat = 'YYYY-MM-DD HH:mm:ss';\n    const overview: OverviewData = useContext(RedataOverviewContext);\n    const anomalies = overview.anomalies;\n    const schemaChanges = overview.schema_changes;\n    return (\n        <div className='grid grid-cols-1'>\n            <h1 className='pl-3 mb-3 text-2xl'>Alerts</h1>\n            <div className=\"flex flex-col\">\n                <div className=\"-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\">\n                    <div className=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\">\n                        <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n                            <table className=\"min-w-full divide-y divide-gray-200\">\n                                <thead className=\"bg-gray-50\">\n                                <tr>\n                                    <th scope=\"col\"\n                                        className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                                        Model\n                                    </th>\n                                    <th scope=\"col\"\n                                        className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                                        Message\n                                    </th>\n                                    <th scope=\"col\"\n                                        className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                                        Metric Value\n                                    </th>\n                                    <th scope=\"col\"\n                                        className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                                        Time Window\n                                    </th>\n                                    <th scope=\"col\" className=\"relative px-6 py-3\">\n                                        <span className=\"sr-only\">Details</span>\n                                    </th>\n                                </tr>\n                                </thead>\n                                <tbody className=\"bg-white divide-y divide-gray-200\">\n                                {anomalies.map(anomaly => (\n                                    <tr key={anomaly.id}>\n                                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                                    <span\n                                        className=\"badge mb-3 bg-red-600 rounded-full px-2.5 py-1 text-center object-right-top text-white text-sm mr-3\">!</span>\n                                            <span\n                                                className='text-sm text-gray-900'>{stripQuotes(anomaly.table_name)}</span>\n                                        </td>\n                                        <td className=\"px-6 text-sm py-4 whitespace-nowrap\">\n                                            <div\n                                                className=\"text-gray-900\">\n                                                {generateAlertMessage(anomaly)}\n                                            </div>\n                                        </td>\n                                        <td className=\"px-6 py-4 text-sm whitespace-nowrap\">\n                                            {generateAnomalyValue(anomaly)}\n                                        </td>\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                                            {dayjs(anomaly.time_window_end).format(dateTimeFormat)}\n                                        </td>\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                                            <Link to={'/graph?model=' + stripQuotes(anomaly.table_name)}\n                                                  className=\"text-indigo-600 hover:text-indigo-900\">Details</Link>\n                                        </td>\n                                    </tr>\n                                ))}\n\n                                {schemaChanges.map(change => (\n                                    <tr key={change.id + '_' + change.prev_column_name}>\n                                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                                    <span\n                                        className=\"badge mb-3 bg-yellow-300 rounded-full px-2.5 py-1\n                                         text-center object-right-top text-white text-sm mr-3\">!</span>\n                                            <span\n                                                className='text-sm text-gray-900'>{stripQuotes(change.table_name)}</span>\n                                        </td>\n                                        <td className=\"px-6 text-sm py-4 whitespace-nowrap\">\n                                            <div\n                                                className=\"text-gray-900\">\n                                                {generateSchemaChangeMessage(change)}\n                                            </div>\n                                        </td>\n                                        <td className=\"px-6 py-4 text-sm whitespace-nowrap\">\n                                            {/*{change.last_value.toFixed(2)}*/}\n                                        </td>\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                                            {dayjs(change.detected_time).format(dateTimeFormat)}\n                                        </td>\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                                            <Link to={'/graph?model=' + stripQuotes(change.table_name)}\n                                                  className=\"text-indigo-600 hover:text-indigo-900\">Details</Link>\n                                        </td>\n                                    </tr>\n                                ))}\n\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default Alerts;\n","import React, {ReactElement} from \"react\";\n\nconst Header: React.FC = (): ReactElement => {\n    return (\n        <React.Fragment>\n            <input type=\"checkbox\" id=\"menu-open\" className=\"hidden\"/>\n\n            <label htmlFor=\"menu-open\"\n                   className=\"absolute right-2 bottom-2 shadow-lg rounded-full p-2 bg-gray-100 text-gray-600 md:hidden\"\n                   data-dev-hint=\"floating action button\">\n                <svg className=\"h-6 w-6\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\"\n                     stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M4 6h16M4 12h16M4 18h16\"/>\n                </svg>\n            </label>\n            <header className=\"bg-gray-600 text-gray-100 flex justify-between md:hidden\"\n                    data-dev-hint=\"mobile menu bar\">\n                <a href=\"/\" className=\"block p-4 text-white font-bold whitespace-nowrap truncate\">\n                    re_data\n                </a>\n\n\n                <label htmlFor=\"menu-open\" id=\"mobile-menu-button\"\n                       className=\"m-2 p-2 focus:outline-none hover:text-white hover:bg-gray-700 rounded-md\">\n                    <svg id=\"menu-open-icon\" className=\"h-6 w-6 transition duration-200 ease-in-out\"\n                         xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\"\n                              d=\"M4 6h16M4 12h16M4 18h16\"/>\n                    </svg>\n                    <svg id=\"menu-close-icon\" className=\"h-6 w-6 transition duration-200 ease-in-out\"\n                         xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\"/>\n                    </svg>\n                </label>\n            </header>\n        </React.Fragment>\n    )\n};\n\nexport default Header;\n","import React, {ReactElement} from \"react\";\nimport {Link} from 'react-router-dom';\nimport {BiNetworkChart, ImNotification, BsSlack, SiReadthedocs} from \"react-icons/all\";\n\nconst Sidebar: React.FC = (): ReactElement => {\n\n    return (\n        <aside id=\"sidebar\"\n               className=\"bg-gray-800 text-gray-100 md:w-32 w-3/4 min-w-min space-y-6 pt-6 px-0 absolute inset-y-0 left-0\n                transform md:relative md:translate-x-0 transition duration-200 ease-in-out  md:flex\n                 md:flex-col md:justify-between max-h-screen overflow-y-auto\" data-dev-hint=\"sidebar; px-0 for frameless; px-2 for visually inset the navigation\">\n            <div className=\"flex flex-col space-y-6\"\n                 data-dev-hint=\"optional div for having an extra footer navigation\">\n                <a href=\"#/alerts\" className=\"text-white flex items-center space-x-2 px-8\" title=\"Your App is cool\">\n                    <span className=\"text-2xl font-extrabold whitespace-nowrap truncate\">\n                        <img alt=\"re_data\" className=\"w-14\" src=\"redata.svg\" />\n                    </span>\n                </a>\n\n                <nav data-dev-hint=\"main navigation\">\n                    <Link to='alerts'\n                          className=\"flex items-center space-x-2 py-2 px-4 transition duration-200 hover:bg-gray-700 hover:text-white\">\n                        <ImNotification size=\"1.25em\" />\n                        <span>Alerts</span>\n                    </Link>\n\n                    <Link to='graph'\n                       className=\"flex items-center space-x-2 py-2 px-4 transition duration-200 hover:bg-gray-700 hover:text-white\">\n                        <BiNetworkChart size=\"1.25em\" />\n                        <span>Graph</span>\n                    </Link>\n                </nav>\n            </div>\n\n            <nav data-dev-hint=\"second-main-navigation or footer navigation\">\n                <a href=\"https://www.getre.io/slack\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"flex items-center space-x-2 py-2 px-4 transition duration-200 hover:bg-gray-700 hover:text-white\">\n                    <BsSlack size=\"1.25em\" />\n                    <div>Slack</div>\n                </a>\n                <a href=\"https://re-data.github.io/re-data/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"flex items-center space-x-2 py-2 px-4 transition duration-200 hover:bg-gray-700 hover:text-white\">\n                    <SiReadthedocs size=\"1.25em\" />\n                    <span>Docs</span>\n                </a>\n\n                <div className=\"flex items-center space-x-2 py-2 px-4 transition duration-200 hover:bg-gray-700 hover:text-white\">\n                    <span className=\"italic\" >version 0.4.0</span>\n                </div>\n            </nav>\n        </aside>\n    );\n};\n\nexport default Sidebar;\n","import React, {ReactElement, useEffect, useState} from \"react\";\nimport Header from \"../components/Header\";\nimport Sidebar from \"../components/Sidebar\";\nimport {Outlet} from 'react-router-dom';\nimport {\n    AggregatedAlerts,\n    AggregatedMetrics, Anomaly,\n    Metric,\n    OverviewData,\n    RedataOverviewContext, SchemaChange\n} from \"../contexts/redataOverviewContext\";\nimport dayjs from \"dayjs\";\nimport {RE_DATA_OVERVIEW_FILE, stripQuotes} from \"../utils/helpers\";\n\ninterface RawOverviewData {\n    anomalies: string | null;\n    metrics: string | null;\n    schema_changes: string | null;\n    graph: string;\n    generated_at: string;\n}\n\nconst extractMetrics = (overview: OverviewData): Map<string, AggregatedMetrics> => {\n    const metrics = overview.metrics;\n    const finalOverview: Map<string, AggregatedMetrics> = new Map();\n    for (const metric of metrics) {\n        const tableName = stripQuotes(metric.table_name);\n        const columnName = stripQuotes(metric.column_name);\n        const metricName = stripQuotes(metric.metric);\n        if (!finalOverview.has(tableName)) {\n            finalOverview.set(tableName, {\n                tableMetrics: new Map<string, Array<Metric>>(),\n                columnMetrics: new Map<string, Array<Metric>>(),\n            });\n        }\n        const metricMap = (finalOverview.get(tableName)!);\n        if (!columnName) { // table metric\n            // use _ as placeholder for column name that doesn't exist in table metrics, so we can have a uniform key structure\n            const key = `${tableName}._.${metricName}`;\n            if (metricMap.tableMetrics.has(key)) {\n                (metricMap.tableMetrics.get(key)!).push(metric);\n            } else {\n                metricMap.tableMetrics.set(key, [metric]);\n            }\n        } else {\n            const key = `${tableName}.${columnName}.${metricName}`;\n            if (metricMap.columnMetrics.has(key)) {\n                (metricMap.columnMetrics.get(key)!).push(metric);\n            } else {\n                metricMap.columnMetrics.set(key, [metric]);\n            }\n        }\n    }\n    // loop through each table/model and sort by ascending order by time_window_end for table and column metrics\n    for (const metricMap of finalOverview.values()) {\n        for (const [key, metrics] of metricMap.tableMetrics) {\n            const sortedMetrics = metrics.sort((a: Metric, b: Metric) => dayjs(a.time_window_end).diff(b.time_window_end));\n            metricMap.tableMetrics.set(key, sortedMetrics);\n        }\n        for (const [key, metrics] of metricMap.columnMetrics) {\n            const sortedMetrics = metrics.sort((a: Metric, b: Metric) => dayjs(a.time_window_end).diff(b.time_window_end));\n            metricMap.columnMetrics.set(key, sortedMetrics);\n        }\n    }\n    return finalOverview;\n};\n\nconst prepareAlerts = (overview: OverviewData): Map<string, AggregatedAlerts> => {\n    const anomalies = overview.anomalies;\n    const schemaChanges = overview.schema_changes;\n    const alerts = new Map<string, AggregatedAlerts>();\n    // group anomalies under `table_name`\n    for (const anomaly of anomalies) {\n        const model = stripQuotes(anomaly.table_name);\n        anomaly.last_value = Number(anomaly.last_value);\n        const columnName = anomaly.column_name ? anomaly.column_name : '_';\n        if (!alerts.has(model)) {\n            const obj: AggregatedAlerts = {\n                anomalies: new Map<string, Array<Anomaly>>(),\n                schemaChanges: new Map<string, Array<SchemaChange>>()\n            }\n            alerts.set(model, obj)\n        }\n        const anomalyMap = (alerts.get(model)!).anomalies;\n        if (!anomalyMap.has(columnName)) {\n            anomalyMap.set(columnName, [anomaly])\n        } else {\n            (anomalyMap.get(columnName)!).push(anomaly)\n        }\n    }\n    // group schema_changes under `table_name`\n    for (const change of schemaChanges) {\n        const model = stripQuotes(change.table_name);\n        const columnName = change.column_name;\n        if (!alerts.has(model)) {\n            const obj: AggregatedAlerts = {\n                anomalies: new Map<string, Array<Anomaly>>(),\n                schemaChanges: new Map<string, Array<SchemaChange>>()\n            }\n            alerts.set(model, obj)\n        }\n        const schemaChangesMap = (alerts.get(model)!).schemaChanges;\n        if (!schemaChangesMap.has(columnName)) {\n            schemaChangesMap.set(columnName, [change])\n        } else {\n            (schemaChangesMap.get(columnName)!).push(change)\n        }\n    }\n    return alerts;\n};\n\nconst Dashboard: React.FC = (): ReactElement => {\n    const initialOverview: OverviewData = {\n        anomalies: [],\n        metrics: [],\n        schema_changes: [],\n        aggregated_metrics: new Map<string, AggregatedMetrics>(),\n        aggregated_alerts: new Map<string, AggregatedAlerts>(),\n        graph: null,\n        generated_at: '',\n    };\n    const [reDataOverview, setReDataOverview] = useState<OverviewData>(initialOverview);\n    const prepareOverviewData = async (): Promise<void> => {\n        try {\n            const response = await fetch(RE_DATA_OVERVIEW_FILE, {\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json'\n                    }\n                }\n            );\n            const rawJson: Array<RawOverviewData> = await response.json();\n            const data = rawJson[0];\n\n            const overview: OverviewData = {\n                anomalies: data.anomalies ? JSON.parse(data.anomalies as string) : [],\n                metrics: data.metrics ? JSON.parse(data.metrics as string) : [],\n                schema_changes: data.schema_changes ? JSON.parse(data.schema_changes as string) : [],\n                aggregated_metrics: new Map<string, AggregatedMetrics>(),\n                aggregated_alerts: new Map<string, AggregatedAlerts>(),\n                graph: JSON.parse(data.graph as string),\n                generated_at: data.generated_at,\n            }\n            overview.aggregated_metrics = extractMetrics(overview);\n            overview.aggregated_alerts = prepareAlerts(overview);\n            console.log(overview)\n            setReDataOverview(overview);\n        } catch (e) {\n            console.log('Unable to load overview file');\n            console.log(e);\n        }\n    };\n    useEffect(() => {\n        prepareOverviewData();\n    }, []);\n\n    return (\n        <RedataOverviewContext.Provider value={reDataOverview}>\n            <div className=\"relative min-h-screen md:flex\" data-dev-hint=\"container\">\n                <Header/>\n                <Sidebar/>\n\n                <main id=\"content\" className=\"flex-1 p-6 lg:px-8 bg-gray-100 max-h-screen overflow-y-auto\">\n                    <div className=\"max-w-full mx-auto h-full\">\n                        <div className=\"px-4 py-6 sm:px-0 h-full\">\n                            <Outlet/>\n                        </div>\n                    </div>\n                </main>\n            </div>\n        </RedataOverviewContext.Provider>\n    );\n};\n\nexport default Dashboard;\n","import React, {memo, PropsWithChildren, ReactElement, useState} from \"react\";\nimport VisNetworkReactComponent from \"vis-network-react\";\nimport {useSearchParams} from \"react-router-dom\";\n\ninterface LineageGraphProps {\n    data: any;\n    events: any;\n    networkOptions: any;\n    overviewDataLoaded: boolean;\n}\n\nconst LineageGraph: React.FC<LineageGraphProps> = (props: PropsWithChildren<LineageGraphProps>): ReactElement => {\n    const [network, setNetwork] = useState<any>(null);\n    const [searchParams] = useSearchParams();\n    const model = searchParams.get('model');\n    if (model && network) {\n        network.selectNodes([model], true);\n    }\n    const getNetwork = (n: any) => {\n        setNetwork(n);\n        console.log(n);\n    };\n    return (\n        <div className=\"col-span-8\">\n            {props.overviewDataLoaded ? <VisNetworkReactComponent\n                data={props.data}\n                options={props.networkOptions}\n                events={props.events}\n                getNetwork={getNetwork}\n            /> : <></>}\n        </div>\n    );\n};\n\nexport default memo(LineageGraph, (prevState) => {\n    if (!prevState.overviewDataLoaded) return false; // allow re-renders if we've not loaded the graph\n    // Return true indicating that the props are always equal to avoid re-rendering of lineage graph since it's static\n    return true\n});\n","import React, {PropsWithChildren, ReactElement} from \"react\";\nimport {DATE_TIME_FORMAT, generateSchemaChangeMessage} from \"../utils/helpers\";\nimport dayjs from \"dayjs\";\nimport {AggregatedAlerts, SchemaChange} from \"../contexts/redataOverviewContext\";\n\ninterface SchemaChangesProps {\n    alerts: AggregatedAlerts;\n}\n\nconst SchemaChanges: React.FC<SchemaChangesProps> = (props: PropsWithChildren<SchemaChangesProps>): ReactElement => {\n    const schemaChanges: SchemaChange[] = [];\n    for (const changes of props.alerts.schemaChanges.values()) {\n        schemaChanges.push(...changes);\n    }\n    return (\n        <div className='mb-3 grid grid-cols-1'>\n            <div className=\"flex flex-col\">\n                <div className=\"-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\">\n                    <div className=\"py-2 align-middle inline-block max-w-full sm:px-6 lg:px-8\">\n                        <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n                            <table className=\"max-w-full divide-y divide-gray-200\">\n                                <thead className=\"bg-gray-50\">\n                                <tr>\n                                    <th scope=\"col\"\n                                        className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                                        Schema Changes\n                                    </th>\n                                </tr>\n                                </thead>\n                                <tbody className=\"bg-white divide-y divide-gray-200\">\n\n                                {schemaChanges.map(change => (\n                                    <tr key={change.id + '_' + change.prev_column_name}>\n                                        <td className=\"px-6 text-sm py-4 whitespace-nowrap\">\n                                            <div\n                                                className=\"text-gray-900\">\n                                                <span\n                                                    className=\"badge mb-3 bg-yellow-300 rounded-full px-2 py-1\n                                         text-center object-right-top text-white text-sm mr-1\">!</span>\n                                                {generateSchemaChangeMessage(change)} at {dayjs(change.detected_time).format(DATE_TIME_FORMAT)}\n                                            </div>\n                                        </td>\n                                    </tr>\n                                ))}\n\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default SchemaChanges;\n","import React, {PropsWithChildren, ReactElement} from \"react\";\nimport {AggregatedAlerts, AggregatedMetrics, Anomaly, Metric} from \"../contexts/redataOverviewContext\";\nimport {DATE_FORMAT, extractComponentFromIdentifier, getFormatter, metricValue} from \"../utils/helpers\";\nimport dayjs from \"dayjs\";\nimport EChartsReactCore from \"echarts-for-react/lib/core\";\nimport * as echarts from \"echarts/core\";\nimport {LineSeriesOption, ScatterSeriesOption} from \"echarts/charts\";\nimport {\n    GridComponentOption,\n    MarkAreaComponentOption,\n    SingleAxisComponentOption,\n    TitleComponentOption, TooltipComponentOption,\n    VisualMapComponentOption\n} from \"echarts/components\";\n\ninterface MetricChartsProps {\n    alerts: AggregatedAlerts,\n    data: AggregatedMetrics,\n    showAnomalies: boolean,\n}\n\ntype ECOption = echarts.ComposeOption<| LineSeriesOption\n    | TitleComponentOption\n    | ScatterSeriesOption\n    | MarkAreaComponentOption\n    | VisualMapComponentOption\n    | SingleAxisComponentOption\n    | TooltipComponentOption\n    | GridComponentOption>;\n\nconst generateMarkAreas = (alerts: AggregatedAlerts, columnName: string, metricName: string): any => {\n    const arr = []\n    const anomaliesMap = alerts.anomalies;\n    // '' empty string key contains anomalies for table level metrics.\n    const anomalies = anomaliesMap.has(columnName)\n        ? anomaliesMap.get(columnName)\n        : anomaliesMap.has('') ? anomaliesMap.get('') : [];\n    for (const anomaly of (anomalies!)) {\n        if (anomaly.metric === metricName) {\n            arr.push([\n                {\n                    xAxis: dayjs(anomaly.time_window_end).subtract(anomaly.interval_length_sec, 's').format(DATE_FORMAT)\n                },\n                {\n                    xAxis: dayjs(anomaly.time_window_end).format(DATE_FORMAT)\n                }\n            ])\n        }\n    }\n    return arr\n}\n\nconst generatePiecesForVisualMap = (metrics: Array<Metric>, alerts: AggregatedAlerts, columnName: string) => {\n    const pieces: any = [];\n    const anomalies = alerts.anomalies;\n    const anomaliesTimeWindow = (anomalies.has(columnName) ? anomalies.get(columnName) : []) as Array<Anomaly>;\n    const set = new Set(anomaliesTimeWindow.map(a => `${a.metric}_${a.time_window_end}`))\n    for (let i = 0; i < metrics.length; i++) {\n        const metric = metrics[i];\n        const key = `${metric.metric}_${metric.time_window_end}`\n        if (set.has(key)) {\n            pieces.push({\n                gt: i - 1,\n                lte: i\n            })\n        }\n    }\n    return pieces;\n};\n\nconst MetricCharts: React.FC<MetricChartsProps> = (props: PropsWithChildren<MetricChartsProps>): ReactElement => {\n    const anomalies = props.alerts.anomalies;\n    const alertChartOptions: Array<[string, ECOption]> = []\n    let timeRange: string[] = [];\n    const tableMetricCharts = (\n        Array.from(props.data.tableMetrics).map(([key, metrics]) => {\n            const metricName = extractComponentFromIdentifier(key, 'metricName');\n            const columnName = extractComponentFromIdentifier(key, 'columnName');\n            const pieces = generatePiecesForVisualMap(metrics, props.alerts, columnName);\n            const options: ECOption = {\n                title: {\n                    text: `${extractComponentFromIdentifier(key, 'metricName')}`,\n                },\n                grid: {top: '20%', right: '5%', bottom: '12%', left: '12%'},\n                xAxis: {\n                    type: 'category',\n                    data: metrics.map(m => dayjs(m.time_window_end).format(DATE_FORMAT)),\n                },\n                yAxis: {\n                    type: 'value',\n                    axisLabel: {\n                        formatter: getFormatter(metricName)\n                    }\n                },\n                series: [\n                    {\n                        name: extractComponentFromIdentifier(key, 'metricName'),\n                        data: metrics.map(metricValue),\n                        type: 'line',\n                        color: '#8884d8',\n                        smooth: true,\n                        markArea: {\n                            itemStyle: {\n                                color: 'rgba(255, 173, 177, 0.4)'\n                            },\n                            data: generateMarkAreas(props.alerts, columnName, metricName)\n                        }\n                    },\n                ],\n                tooltip: {\n                    trigger: 'axis',\n                },\n                visualMap: {\n                    show: false,\n                    dimension: 0,\n                    pieces: pieces,\n                    inRange: {\n                        color: pieces.length ? '#ee2828' : '#8884d8', // if no anomaly exists, everything is in range hence don't color red\n                    },\n                    outOfRange: {\n                        color: '#8884d8',\n                    }\n                }\n            };\n            if (anomalies.has(columnName)) {\n                const tableAnomalies = anomalies.get(columnName) as Anomaly[];\n                for (const anomaly of tableAnomalies) {\n                    if (anomaly.metric === metricName) {\n                        alertChartOptions.push([key, options]);\n                    }\n                }\n            }\n            return (\n                <div key={key}>\n                    <EChartsReactCore echarts={echarts} option={options}/>\n                </div>\n            )\n        }));\n    const columnMetricCharts = (\n        Array.from(props.data.columnMetrics).map(([key, metrics]) => {\n            const metricName = extractComponentFromIdentifier(key, 'metricName');\n            const columnName = extractComponentFromIdentifier(key, 'columnName');\n            if (!timeRange.length) {\n                timeRange = metrics.map(m => m.time_window_end)\n            }\n            const pieces = generatePiecesForVisualMap(metrics, props.alerts, columnName);\n            const options: ECOption = {\n                title: {\n                    text: `${extractComponentFromIdentifier(key, 'metricName')}(${extractComponentFromIdentifier(key, 'columnName')})`\n                },\n                grid: {top: '20%', right: '5%', bottom: '12%', left: '12%'},\n                xAxis: {\n                    type: 'category',\n                    data: metrics.map(m => dayjs(m.time_window_end).format(DATE_FORMAT)),\n                },\n                yAxis: {\n                    type: 'value',\n                    axisLabel: {\n                        formatter: getFormatter(metricName)\n                    }\n                },\n                series: [\n                    {\n                        name: metricName,\n                        data: metrics.map(metricValue),\n                        type: 'line',\n                        color: '#8884d8',\n                        smooth: true,\n                        markArea: {\n                            itemStyle: {\n                                color: 'rgba(255, 173, 177, 0.4)'\n                            },\n                            data: generateMarkAreas(props.alerts, columnName, metricName)\n                        },\n                    }\n                ],\n                tooltip: {\n                    trigger: 'axis',\n                },\n                visualMap: {\n                    show: false,\n                    dimension: 0,\n                    pieces: pieces,\n                    inRange: {\n                        color: pieces.length ? '#ee2828' : '#8884d8', // if no anomaly exists, everything is in range hence don't color red\n                    },\n                    outOfRange: {\n                        color: '#8884d8',\n                    }\n                }\n            };\n            if (anomalies.has(columnName)) {\n                const columnAnomalies = anomalies.get(columnName) as Anomaly[];\n                const seen = new Set()\n                for (const anomaly of columnAnomalies) {\n                    if (anomaly.metric === metricName && anomaly.column_name === columnName && !seen.has(key)) {\n                        alertChartOptions.push([key, options]);\n                        seen.add(key)\n                    }\n                }\n            }\n            return (\n                <div key={key}>\n                    <EChartsReactCore echarts={echarts} option={options}/>\n                </div>\n            )\n        }));\n\n    const alertMetricCharts = alertChartOptions.map(([key, option]) => {\n        key = `alert_${key}`\n        return (\n            <div key={key}>\n                <EChartsReactCore echarts={echarts} option={option}/>\n            </div>\n        )\n    })\n\n    return (\n        <React.Fragment>\n            {props.showAnomalies ?\n                <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg p-4 mt-3 mb-3\">\n                    {alertMetricCharts}\n                </div> :\n                <div>\n                    <span className=\"text-lg text--capitalize\">Table Metrics</span>\n                    <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg p-4 mt-3 mb-3\">\n                        {tableMetricCharts}\n                    </div>\n                    <span className=\"text-lg text--capitalize\">Column Metrics</span>\n                    <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg p-4 mt-3 mb-3\">\n                        {columnMetricCharts}\n                    </div>\n                </div>\n            }\n        </React.Fragment>\n    );\n\n}\n\nexport default MetricCharts;\n","import React, {ReactElement, useContext} from \"react\";\nimport './GraphView.css';\nimport LineageGraph from \"../components/LineageGraph\";\nimport ModelDetails from \"../components/ModelDetails\";\nimport {useSearchParams} from \"react-router-dom\";\nimport {DbtNode, DbtSource, OverviewData, RedataOverviewContext} from \"../contexts/redataOverviewContext\";\n\ninterface VisPointer {\n    x: number,\n    y: number\n}\n\ninterface VisNode {\n    id: string | number,\n    label: string | number;\n    shape: string;\n}\n\ninterface VisEdge {\n    from: string | number,\n    to: string | number;\n    arrows: string;\n}\n\ninterface VisNetworkEventParams {\n    edges?: Array<string>,\n    nodes?: Array<string>,\n    event?: object,\n    pointer?: {\n        DOM: VisPointer\n        canvas: VisPointer\n    }\n}\n\ninterface IGraph {\n    nodes: Array<VisNode>;\n    edges: Array<VisEdge>;\n}\n\nconst generateGraph = (overview: OverviewData) => {\n    const graph: IGraph = {\n        nodes: [],\n        edges: [],\n    }\n    if (!overview.graph) {\n        return graph;\n    }\n    const dbtNodes = overview.graph.nodes;\n    const dbtSources = overview.graph.sources;\n    for (const [model, details] of Object.entries(dbtNodes)) {\n        const [resource, packageName, modelName] = model.split('.');\n        if (resource === 'test' || packageName === 're_data') {\n            continue;\n        }\n        const modelId = `${details.database}.${details.schema}.${details.name}`;\n        const node: VisNode = {\n            id: modelId,\n            label: modelName,\n            shape: 'box',\n        }\n        graph.nodes.push(node)\n\n        const parentNodes = new Set(details.depends_on.nodes);\n        for (const parent of parentNodes) {\n            const parentNode: DbtNode | DbtSource = dbtNodes[parent] ? dbtNodes[parent] : dbtSources[parent];\n            if (parentNode) {\n                // in coming edge only if parent node exists\n                const parentModelId = `${parentNode.database}.${parentNode.schema}.${parentNode.name}`;\n                const edge: VisEdge = {\n                    from: parentModelId,\n                    to: modelId,\n                    arrows: 'to'\n                }\n                graph.edges.push(edge);\n            }\n        }\n    }\n    return graph;\n};\n\nconst GraphView: React.FC = (): ReactElement => {\n    const overview: OverviewData = useContext(RedataOverviewContext);\n    const overviewDataLoaded = !!overview.graph; // if graph is not null, then we have fetched the overview json file\n    const graph = generateGraph(overview)\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [searchParams, setURLSearchParams] = useSearchParams();\n    const data = {\n        nodes: graph.nodes,\n        edges: graph.edges\n    }\n    const events = {\n        selectNode: (params: VisNetworkEventParams) => {\n            console.log('node selected', params)\n            if (!params.nodes || params.nodes.length !== 1) {\n                // only select a single node\n                return\n            }\n            const modelIdentifier = params.nodes[0];\n            setURLSearchParams({\n                model: modelIdentifier,\n            });\n        },\n        deselectNode: (_: VisNetworkEventParams) => {\n            setURLSearchParams({});\n        }\n    };\n    const networkOptions = {\n        \"height\": '100%',\n        \"width\": '100%',\n        \"edges\": {\n            \"color\": {\n                \"color\": \"#8884d8\",\n                \"highlight\": \"#8884d8\",\n                \"hover\": \"#8884d8\",\n                \"inherit\": false\n            }, \"dashes\": false, \"smooth\": {\"type\": \"continuous\", \"forceDirection\": \"none\"}\n        },\n        \"nodes\": {\n            \"color\": {\n                \"border\": \"#8884d8\",\n                \"background\": \"#8884d8\",\n                \"highlight\": \"#392396\",\n                \"hover\": {\n                    \"border\": \"#392396\",\n                    \"background\": \"#8884d8\",\n                }\n            },\n            // \"color\": \"#8884d8\",\n            \"font\": {\n                \"color\": \"#ffffff\"\n            }\n        },\n        \"layout\": {\n            \"hierarchical\": {\n                \"enabled\": true,\n                \"levelSeparation\": 485,\n                \"nodeSpacing\": 50,\n                \"treeSpacing\": 35,\n                \"blockShifting\": false,\n                \"edgeMinimization\": true,\n                \"parentCentralization\": false,\n                \"direction\": \"LR\",\n                \"sortMethod\": \"directed\"\n            }\n        },\n        \"interaction\": {\"hover\": true, \"navigationButtons\": false, \"multiselect\": true, \"keyboard\": {\"enabled\": true}},\n        \"physics\": {\n            \"enabled\": false,\n            \"hierarchicalRepulsion\": {\"centralGravity\": 0},\n            \"minVelocity\": 0.75,\n            \"solver\": \"hierarchicalRepulsion\"\n        }\n    };\n\n    return (\n        <div className='h-full'>\n            <h1 className='pl-3 mb-3 text-2xl'>Graph View</h1>\n            <div\n                className=\"grid grid-cols-1 sm:grid-cols-1 md:grid-cols-12\n             gap-4 border-2 border-solid border-gray-200\n              rounded-lg h-full\">\n                <LineageGraph data={data} events={events} networkOptions={networkOptions}\n                              overviewDataLoaded={overviewDataLoaded}/>\n                <ModelDetails/>\n            </div>\n        </div>\n    )\n};\n\nexport default GraphView;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Routes, Route, HashRouter} from \"react-router-dom\";\nimport reportWebVitals from './reportWebVitals';\nimport Alerts from \"./pages/Alerts\";\nimport Dashboard from \"./pages/Dashboard\";\nimport GraphView from \"./pages/GraphView\";\n\nReactDOM.render(\n    <HashRouter>\n        <Routes>\n            <Route path=\"/\" element={<App/>}>\n                <Route path=\"/\" element={<Dashboard/>}>\n                    <Route path=\"alerts\" element={<Alerts/>}/>\n                    <Route path=\"graph\" element={<GraphView/>}/>\n                </Route>\n            </Route>\n        </Routes>\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}